// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { DeleteMessageData, GetMessageByIdData, GetMessageByIdResponse, UpdateMessageData, UpdateMessageResponse, GetMessagesWithFiltersData, GetMessagesWithFiltersResponse, PostMessageData, PostMessageResponse, EnableMessageData, EnableMessageResponse, DisableMessageData, DisableMessageResponse, GetUserData, GetUserResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Delete a system message by ID
 */
export const deleteMessage = <ThrowOnError extends boolean = false>(options: Options<DeleteMessageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        url: '/api/system-messages/{id}',
        ...options
    });
};

/**
 * Get a system message by ID
 */
export const getMessageById = <ThrowOnError extends boolean = false>(options: Options<GetMessageByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMessageByIdResponse, unknown, ThrowOnError>({
        url: '/api/system-messages/{id}',
        ...options
    });
};

/**
 * Update an existing system message
 */
export const updateMessage = <ThrowOnError extends boolean = false>(options: Options<UpdateMessageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateMessageResponse, unknown, ThrowOnError>({
        url: '/api/system-messages/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get system messages with optional filters
 */
export const getMessagesWithFilters = <ThrowOnError extends boolean = false>(options?: Options<GetMessagesWithFiltersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMessagesWithFiltersResponse, unknown, ThrowOnError>({
        url: '/api/system-messages',
        ...options
    });
};

/**
 * Create a new system message
 */
export const postMessage = <ThrowOnError extends boolean = false>(options: Options<PostMessageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostMessageResponse, unknown, ThrowOnError>({
        url: '/api/system-messages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Enable a previously disabled system message
 */
export const enableMessage = <ThrowOnError extends boolean = false>(options: Options<EnableMessageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<EnableMessageResponse, unknown, ThrowOnError>({
        url: '/api/system-messages/{id}/enable',
        ...options
    });
};

/**
 * Disable a system message
 */
export const disableMessage = <ThrowOnError extends boolean = false>(options: Options<DisableMessageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<DisableMessageResponse, unknown, ThrowOnError>({
        url: '/api/system-messages/{id}/disable',
        ...options
    });
};

export const getUser = <ThrowOnError extends boolean = false>(options?: Options<GetUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserResponse, unknown, ThrowOnError>({
        url: '/api/auth/user',
        ...options
    });
};