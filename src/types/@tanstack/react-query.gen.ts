// This file is auto-generated by @hey-api/openapi-ts

import { type Options, deleteMessage, getMessageById, updateMessage, getMessagesWithFilters, postMessage, enableMessage, disableMessage, getUser } from '../sdk.gen';
import { type UseMutationOptions, type DefaultError, queryOptions } from '@tanstack/react-query';
import type { DeleteMessageData, GetMessageByIdData, UpdateMessageData, UpdateMessageResponse, GetMessagesWithFiltersData, PostMessageData, PostMessageResponse, EnableMessageData, EnableMessageResponse, DisableMessageData, DisableMessageResponse, GetUserData } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export const deleteMessageMutation = (options?: Partial<Options<DeleteMessageData>>): UseMutationOptions<unknown, DefaultError, Options<DeleteMessageData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<DeleteMessageData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteMessage({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getMessageByIdQueryKey = (options: Options<GetMessageByIdData>) => createQueryKey('getMessageById', options);

export const getMessageByIdOptions = (options: Options<GetMessageByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMessageById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMessageByIdQueryKey(options)
    });
};

export const updateMessageMutation = (options?: Partial<Options<UpdateMessageData>>): UseMutationOptions<UpdateMessageResponse, DefaultError, Options<UpdateMessageData>> => {
    const mutationOptions: UseMutationOptions<UpdateMessageResponse, DefaultError, Options<UpdateMessageData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateMessage({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getMessagesWithFiltersQueryKey = (options?: Options<GetMessagesWithFiltersData>) => createQueryKey('getMessagesWithFilters', options);

export const getMessagesWithFiltersOptions = (options?: Options<GetMessagesWithFiltersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMessagesWithFilters({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMessagesWithFiltersQueryKey(options)
    });
};

export const postMessageQueryKey = (options: Options<PostMessageData>) => createQueryKey('postMessage', options);

export const postMessageOptions = (options: Options<PostMessageData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postMessage({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postMessageQueryKey(options)
    });
};

export const postMessageMutation = (options?: Partial<Options<PostMessageData>>): UseMutationOptions<PostMessageResponse, DefaultError, Options<PostMessageData>> => {
    const mutationOptions: UseMutationOptions<PostMessageResponse, DefaultError, Options<PostMessageData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postMessage({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const enableMessageMutation = (options?: Partial<Options<EnableMessageData>>): UseMutationOptions<EnableMessageResponse, DefaultError, Options<EnableMessageData>> => {
    const mutationOptions: UseMutationOptions<EnableMessageResponse, DefaultError, Options<EnableMessageData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await enableMessage({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const disableMessageMutation = (options?: Partial<Options<DisableMessageData>>): UseMutationOptions<DisableMessageResponse, DefaultError, Options<DisableMessageData>> => {
    const mutationOptions: UseMutationOptions<DisableMessageResponse, DefaultError, Options<DisableMessageData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await disableMessage({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getUserQueryKey = (options?: Options<GetUserData>) => createQueryKey('getUser', options);

export const getUserOptions = (options?: Options<GetUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUserQueryKey(options)
    });
};